package Library_Managment_System.StudentBooks.Service;


import Library_Managment_System.StudentBooks.DTOs.BookRequestDTO;
import Library_Managment_System.StudentBooks.Models.Author;
import Library_Managment_System.StudentBooks.Models.Book;
import Library_Managment_System.StudentBooks.Repo.AuthorRepository;
import Library_Managment_System.StudentBooks.Repo.BookRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class BookService {

    @Autowired
    BookRepository bookRepository;

    @Autowired
    AuthorRepository authorRepository;


//    public String addBook(Book book) {
//        //want to get object of author entity ... from postman
//        //1. get its id, from book object -> author -> id
//        int authorId = book.getAuthor().getId(); //book has getAuthor() method -> return author object
//        //author has getId() method -> return id of author object
//        //2. now fetch the author entity... in try catch -> might throw exception
//        Author author = null;
//        try { //CRUD operations in JpaRepository... get author object by author id... (findById)
//            author = authorRepository.findById(authorId).get();
//        } catch (Exception e) {
//            System.out.println("Author not present.");
//        }
//    }
       /* //basic attributes of book -> set
        //set the foreign attribute, author
        book.setAuthor(author);
        //update list of books written, in author entity
        //1. get the existing list of books written by author
        List<Book> curr_booksWritten = author.getBooksWritten();
        //2. add the book to the list
        curr_booksWritten.add(book);
        //3. set this updated list in author
        author.setBooksWritten(curr_booksWritten);
        //now book is to be saved, and author is to be updated as well
        //only save author, book is auto-saved, by cascading effect
        authorRepository.save(author); //save works as both save and update
        //if we write ->
        //bookRepository.save(book); -> will create a duplicate entry
        return "Book added successfully.";
    }
    */


    public String addBook(BookRequestDTO bookRequestDTO) {
        //find author from author repo, by searching by ID, from user input i.e. DTO
        Author author = authorRepository.findById(bookRequestDTO.getAuthorId()).get();

        //create book entity, save it to db
        Book book = new Book();

        //set basic attributes, from DTO to entity
        book.setName(bookRequestDTO.getName());
        book.setGenre(bookRequestDTO.getGenre());
        book.setPages(bookRequestDTO.getPages());
        book.setRating(bookRequestDTO.getRating());

        //set foreign key attribute
        book.setAuthor(author);

        //update list of books written, add curr one
        List<Book> curr_booksWritten = author.getBooksWritten();
        curr_booksWritten.add(book);
        author.setBooksWritten(curr_booksWritten);

        //save book
        authorRepository.save(author); //save works as both save and update

        return "Book added successfully.";
    }
    /*
    how book object is created in postman ->
    id -> autogenerated
    name, pages, genre->(one of the fixed values), rating
    //....card, author objects -> sent or not?....//
    card -> not sent, as this book hasn't been issued as of now
    author -> needed, as book will always have an author
    in the database, in order to connect book with author, i.e. set foreign key attribute in book entity... HOW???
    we need to have author entity, to get this author entity, we use author id/name ... call from author repo
    //....author repo -> call author id -> fetch author entity....//
    author is an object, so will be entered inside {} in postman
    */

    /*
    Request body of book ->
    "name": "Harry Potter",
    "pages": 877,
    "genre": "FICTIONAL",
    "rating": 9,
    "author": { "id": 1 }    ... will fetch author with id = 1,("name": "J.K.Rowling") from author entity
    */
}